DAY 3

1. For the given JASON iterate over all for loops (for, for in, for of, for each).

      FOR LOOP:
         The For Loop comes first because of its simplicity and ease of use. It is a 
         very user-friendly kind of loop that runs with a method of using a counter. 
         The value is first set with an appropriate condition, which is also called 
         ‘initializing a loop’. Next, the terminal or final value is specified. The 
         For Loop makes things really easy when you need to run a set of codes multiple 
         times.

      The For Loop is further divided into:
         *Using an array.
               var numbers = [ 10, 20, 30, 40, 50] 
          for (var i=0; i < numbers.length; i++) {
                console.log(numbers[i])
                }

         *Making a loop through DOM elements.
                var elements = document.querySelectorAll("a");
          for (var i=0; i<elements.length; i++) {
                elements[i].style.color = "red";
              }

       FOR IN LOOP:
           Another way of looping is the For In Loop. Unlike the For Loop, this loop won’t 
       be using a counter. So this makes the whole process even more simple and hassle-free. 
       In fact, the For In Loop is essentially a simplified version of the For Loop.
?
       
       Looping through an Object Property
              Here’s an example; you’ve got an object containing some properties and you need 
       to look up each property and the value that it carries. Here’s how you would use the For 
       In Loop to do so:
          var person = {
                         fname: "Nick",
                         lname: "Jonas",
                         age: 26
                       }; 
          for (let x in person) {
                                 console.log(x + ": "+ person[x])
            }

       FOR OF LOOP:
          The for...of statement executes a loop that operates on a sequence of values sourced from 
       an iterable object. Iterable objects include instances of built-ins such as Array, String, 
       TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, 
       generators produced by generator functions, and user-defined iterables.

       
       FOR EACH LOOP:
          var names = ["jerry", "tom", "pluto", "micky", "mini"];
          names.forEach(function1);
          function function1(currentValue, index) {
                  console.log("Index in array is: "+index + " ::  Value is: "+currentValue);
              }


   2. Difference between window, Screen, Document in javascript.

                
      WINDOW:
             Each browser tab has its own top-level window object. Each <iframe> (and deprecated <frame>)
      element has its own window object too, nested within a parent window. Each of these windows gets its 
      own separate global object. window.window always refers to window, but window.parent and window.top 
      might refer to enclosing windows, giving access to other execution contexts. In addition to document 
      and screen described below, window properties include
            

               * setTimeout() and setInterval() binding event handlers to a timer

               * location giving the current URL

               * history with methods back() and forward() giving the tab's mutable history

               * navigator describing the browser software


      DOCUMENT:
               Each window object has a document object to be rendered. These objects get confused in part 
      because HTML elements are added to the global object when assigned a unique id. E.g., in the HTML snippet

      <body>
           <p id="holyCow"> This is the first paragraph.</p>
      </body>
      the paragraph element can be referenced by any of the following:

          * window.holyCow or window["holyCow"]

          * document.getElementById("holyCow")

          * document.querySelector("#holyCow")

          * document.body.firstChild

          * document.body.children[0]


      SCREEN:
             The window object also has a screen object with properties describing the physical display:

                * screen properties width and height are the full screen

                * screen properties availWidth and availHeight omit the toolbar

      The portion of a screen displaying the rendered document is the viewport in JavaScript, which is 
      potentially confusing because we call an application's portion of the screen a window when talking 
      about interactions with the operating system. The getBoundingClientRect() method of any document 
      element will return an object with top, left, bottom, and right properties describing the location 
      of the element in the viewport.